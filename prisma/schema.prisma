generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id
  email        String        @unique
  password     String
  name         String
  role         String
  departmentId String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  department      Department     @relation(fields: [departmentId], references: [id])
  dailyReports    DailyReport[]
  approvedReports DailyReport[]  @relation("ApprovedReports")
  notifications   Notification[]

  @@index([email])
  @@index([departmentId])
}

model Department {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  projects Project[]
}

model Project {
  id           String   @id
  name         String
  description  String?
  departmentId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department Department @relation(fields: [departmentId], references: [id])
  tasks      Task[]

  @@index([departmentId])
}

model DailyReport {
  id          String    @id
  userId      String
  date        DateTime  @db.Date
  status      String    @default("draft")
  challenges  String
  nextDayPlan String
  submittedAt DateTime?
  approvedAt  DateTime?
  approvedBy  String?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  approver User?  @relation("ApprovedReports", fields: [approvedBy], references: [id])
  tasks    Task[]

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([status])
}

model Task {
  id             String      @id
  dailyReportId  String
  projectId      String
  description    String
  hoursSpent     Float
  progress       Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  project     Project     @relation(fields: [projectId], references: [id])

  @@index([dailyReportId])
  @@index([projectId])
}

model Notification {
  id        String   @id
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}